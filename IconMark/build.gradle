// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'
apply plugin: 'maven'
apply plugin: 'jacoco'

buildscript {
    ext.kotlin_version = '1.3.61'
    ext.android_gradle_version = '3.5.2'
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven {
            url "https://maven.google.com"
        }
//        maven { url "http://repo1.maven.org/maven2/" }
    }
    dependencies {
        // jfrog bintray: a platform to control your publish
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

sourceCompatibility = 1.8
repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://maven.google.com'}
}

sourceSets {
    main.java.srcDirs += 'src/main/'
    test.java.srcDirs += 'src/test/'
}

dependencies {
    // custom gradle plugin dependency
    implementation gradleApi()
    // for gradle tasks related api, e.g. archiveClassifier
    implementation "com.android.tools.build:gradle:$android_gradle_version"
    // kotlin gradle plugin
    implementation "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
}

// docs generation tasks
task generateSourcesJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    classifier 'sources'
}

task generateJavadocs(type: Javadoc) {
    failOnError false
    source = sourceSets.main.java.srcDirs
}

task generateJavadocsJar(type: Jar) {
    from generateJavadocs.destinationDir
    classifier 'javadoc'
}

generateJavadocsJar.dependsOn generateJavadocs

// publish settings
def libGroupId = 'ca.six'
def libArtifactId = 'customMark'
def libVersion = '1.0.0'

group libGroupId
version libVersion
artifacts {
    archives generateSourcesJar
    archives generateJavadocsJar
}

def pomConfig = {
    licenses {
        license {}
    }
    developers {
        developer {}
    }
    scm {}
}

publishing {
    publications {
        PluginPublication(MavenPublication) {
            from components.java
            groupId libGroupId
            artifactId libArtifactId
            version libVersion
            pom.withXml {
                def root = asNode()
            }
        }
    }
}
